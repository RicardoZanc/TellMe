// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String
  
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Relations
  posts            Post[]
  comments         Comment[]
  postReactions    PostReaction[]
  commentReactions CommentReaction[]
  savedPosts       SavedPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  views   Int    @default(0)

  // Relations
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  comments      Comment[]
  postReactions PostReaction[]
  savedPosts    SavedPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  content String

  // Relations
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // Self-referencing for nested comments
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")

  commentReactions CommentReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model PostReaction {
  id   String      @id @default(cuid())
  type ReactionType

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  // Ensure one reaction per user per post
  @@unique([userId, postId])
  @@map("post_reactions")
}

model CommentReaction {
  id   String      @id @default(cuid())
  type ReactionType

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  createdAt DateTime @default(now())

  // Ensure one reaction per user per comment
  @@unique([userId, commentId])
  @@map("comment_reactions")
}

model SavedPost {
  id String @id @default(cuid())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  // Ensure one save per user per post
  @@unique([userId, postId])
  @@map("saved_posts")
}

enum ReactionType {
  LIKE
  DISLIKE
}
